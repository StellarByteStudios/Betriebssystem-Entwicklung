######################################
# Environment variables
######################################

[env]
#APP_IMAGE = "hello.bin"
KERNEL_IMAGE = "kernel.elf"
ISO = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${CARGO_MAKE_PROJECT_NAME}.iso"
BOOTLOADER_DIRECTORY = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/loader"
LINKER = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "ld", mapping = { "macos" = "x86_64-elf-ld" } }
OBJCOPY = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "objcopy", mapping = { "macos" = "x86_64-elf-objcopy" } }
SOUND = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "id=snd0,driver=pa", mapping = { "macos" = "coreaudio,id=snd0" } }
KERNEL = "${BOOTLOADER_DIRECTORY}/isofiles/boot/${KERNEL_IMAGE}"
RAW_TAR_IMAGE = "${BOOTLOADER_DIRECTORY}/isofiles/boot/initrd.tar"
#APP_ELF = "${BOOTLOADER_DIRECTORY}/isofiles/hello.elf"
#APP_BIN = "${BOOTLOADER_DIRECTORY}/isofiles/boot/apps/${APP_IMAGE}"
APPS_BIN_FOLDER = "${BOOTLOADER_DIRECTORY}/isofiles/boot/apps/"


######################################
# Running & debugging tasks
######################################

[tasks.qemu]
command = "qemu-system-x86_64"
args = [
    "-cdrom",
    "${ISO}",
    "-serial",
    "stdio",
    "-audiodev",
    "${SOUND}",
    "-machine",
    "pcspk-audiodev=snd0",
]
dependencies = ["iso"]

[tasks.qemu-gdb]
command = "qemu-system-x86_64"
args = [
    "-cdrom",
    "${ISO}",
    "-serial",
    "stdio",
    "-audiodev",
    "${SOUND}",
    "-machine",
    "pcspk-audiodev=snd0",
    "-s",
    "-S",
]
dependencies = ["iso", "gdb-echo-for-vscode"]


[tasks.gdb-echo-for-vscode]
command = "echo"
args = ["Debugging..."]

[tasks.gdb]
command = "gdb"
args = ["-x", "gdbcommands", "loader/${KERNEL_IMAGE}"]


######################################
# Build tasks
######################################

# default task
[tasks.default]
alias = "iso"

# build & link apps and os
[tasks.link]
run_task = { name = "link", fork = true }


# Creating .tar arcive of apps
[tasks.tar]
command = "tar"
args = [ "-c", "-f", "${RAW_TAR_IMAGE}", "${APPS_BIN_FOLDER}"]

[tasks.create-appfolder]
command = "mkdir"
args = ["-p", "${APPS_BIN_FOLDER}"]



######################################
# Bootloader tasks
######################################

[tasks.iso]
command = "grub-mkrescue"
args = ["-o", "${ISO}", "${BOOTLOADER_DIRECTORY}/isofiles"]
dependencies = ["create-appfolder", "link", "tar"]
condition = { files_modified = { input = [
    # The input file of tasks.iso are the kernel and application images
    "${KERNEL}",
    "${APP_BIN}",
    "${BOOTLOADER_DIRECTORY}/isofiles/boot/grub/grub.cfg",
], output = [
    # ISO output file
    "${ISO}",
] } }


######################################
# Cleanup tasks
######################################

[tasks.clean]
command = "cargo"
args = ["clean"]
dependencies = ["remove-images", "remove-bins"]

[tasks.remove-images]
command = "rm"
args = [
    "-f",
    "${KERNAL}",
    "${RAW_TAR_IMAGE}",
]

[tasks.remove-bins]
command = "rm"
args = [
    "-r",
    "${APPS_BIN_FOLDER}",
]
